{"version":3,"sources":["components/Header/Header.tsx","components/FormControlHelper/FormControlHelper.tsx","components/PopOverInfo/PopOverInfo.tsx","components/FormGroupContent/FormGroupContent.tsx","components/FieldSimple/FieldSimple.tsx","components/FieldHidden/FieldHidden.tsx","components/FieldROChildren/FieldROChildren.tsx","components/AddOnSelect/AddOnSelect.tsx","components/Field2Inputs/Field2Inputs.tsx","components/Field2Inputs/Field2InputsContainer.tsx","formFields/formFields.ts","components/FormHeader/FormHeader.tsx","components/FormState/FormState.tsx","components/FormWizard/FormWizard.tsx","common/validator.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","FormControlHelper","input","meta","props","type","Form","Check","custom","label","id","name","isInvalid","touched","error","isValid","feedback","Control","as","size","options","map","option","key","value","PopOverInfo","popOverBlock","Popover","Title","labelInfo","title","Content","message","OverlayTrigger","trigger","placement","overlay","FormGroupContent","Label","column","xs","md","Col","Feedback","FieldSimple","Group","controlId","Row","FieldHidden","filter","item","sm","Button","variant","block","onClick","fields","remove","index","FieldROChildren","rest","React","useState","newOptions","setNewOptions","values","useFormState","childrenValues","undefined","useEffect","length","indexOf","clearOption","form","mutators","clear","push","disabled","component","AddOnSelect","Field2Inputs","addOn","formField","Field2InputsContainer","nextIndex","formFields","currentStep","yupObject","yup","trim","required","round","positive","typeError","email","oneOf","FormHeader","items","i","formWizardLength","previousStep","FormState","Jumbotron","JSON","stringify","FormWizard","setCurrentStep","Math","max","isLastStep","onSubmit","window","alert","min","validate","schema","validationSchema","shape","Object","fromEntries","a","abortEarly","inner","reduce","formError","innerError","setIn","path","customValidator","arrayMutators","state","changeValue","subscription","submitting","handleSubmit","App","lg","xl","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cc4134ec.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n\r\n\treturn (\r\n\t\t<header className=\"header\">\r\n\t\t\t<h1>React Wizard Form</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header","// React Bootstrap FormControl render helper\r\n\r\nimport React from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { FormCheckType } from 'react-bootstrap/FormCheck'\r\nimport {FormComponentType} from '../../types/types'\r\n\r\nconst FormControlHelper: React.FC<FormComponentType> = ({ input, meta, ...props }) => {\r\n\r\n\tswitch (input.type) {\r\n\t\tcase 'checkbox':\r\n\t\tcase 'radio':\r\n\t\tcase 'switch':\r\n\t\t\treturn (\r\n\t\t\t\t<Form.Check\r\n\t\t\t\t\tcustom\r\n\t\t\t\t\tlabel={props.label}\r\n\t\t\t\t\tid={input.name}\r\n\t\t\t\t\tisInvalid={!!(meta.touched && meta.error)}\r\n\t\t\t\t\tisValid={meta.touched && !meta.error}\r\n\t\t\t\t\tclassName=\"custom-control-lg\"\r\n\t\t\t\t\tfeedback={meta.error}\r\n\t\t\t\t\t{...input}\r\n\t\t\t\t\ttype={input.type as FormCheckType}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\tcase 'select':\r\n\t\t\treturn (\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t\tcustom\r\n\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\tisInvalid={!!(meta.touched && meta.error)}\r\n\t\t\t\t\tisValid={meta.touched && !meta.error}\r\n\t\t\t\t\tclassName=\"option-hidden\"\r\n\t\t\t\t\t{...input}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.options ? props.options.map((option) => <option key={option.value} value={option.value}>{option.label}</option>) : <option>No options</option>}\r\n\t\t\t\t</Form.Control>\r\n\t\t\t)\r\n\t\tdefault:\r\n\t\t\treturn (\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\tisInvalid={!!(meta.touched && meta.error)}\r\n\t\t\t\t\tisValid={meta.touched && !meta.error}\r\n\t\t\t\t\t{...input}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default FormControlHelper","import React from 'react'\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Popover from \"react-bootstrap/Popover\"\r\nimport {PopOverType} from \"../../types/types\"\r\n\r\ntype PropsType = {\r\n\tlabelInfo: PopOverType\r\n}\r\n\r\nconst PopOverInfo: React.FC<PropsType> = (props) => {\r\n\r\n\tconst popOverBlock = (\r\n\t\t<Popover id=\"popover-basic\">\r\n\t\t\t<Popover.Title as=\"h3\">{props.labelInfo.title}</Popover.Title>\r\n\t\t\t<Popover.Content>{props.labelInfo.message}</Popover.Content>\r\n\t\t</Popover>\r\n\t)\r\n\r\n\treturn (\r\n\t\t<OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popOverBlock}>\r\n\t\t\t<button type=\"button\" className=\"popover-info\">i</button>\r\n\t\t</OverlayTrigger>\r\n\t)\r\n}\r\n\r\nexport default PopOverInfo","// Standard block for fields with label and input\r\n\r\nimport React from 'react'\r\nimport Form from \"react-bootstrap/Form\"\r\nimport Col from \"react-bootstrap/Col\"\r\nimport FormControlHelper from \"../FormControlHelper/FormControlHelper\"\r\nimport {FormComponentType} from \"../../types/types\"\r\nimport PopOverInfo from \"../PopOverInfo/PopOverInfo\"\r\n\r\nconst FormGroupContent: React.FC<FormComponentType> = (props) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{props.input.type !== 'checkbox' && props.input.type !== 'radio' ?\r\n\t\t\t\t<Form.Label column xs=\"12\" md=\"3\" className=\"col-form-label-lg\">\r\n\t\t\t\t\t{props.label}\r\n\t\t\t\t\t{props.labelInfo ? <PopOverInfo labelInfo={props.labelInfo}/> : null}\r\n\t\t\t\t</Form.Label>\r\n\t\t\t\t: <Col xs=\"12\" md=\"3\" />\r\n\t\t\t}\r\n\r\n\t\t\t<Col>\r\n\t\t\t\t<FormControlHelper {...props} />\r\n\r\n\t\t\t\t{props.input.type !== 'checkbox' && props.input.type !== 'radio' ?\r\n\t\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n\t\t\t\t\t\t<span>{props.meta.error}</span>\r\n\t\t\t\t\t</Form.Control.Feedback>\r\n\t\t\t\t\t: null\r\n\t\t\t\t}\r\n\r\n\t\t\t</Col>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default FormGroupContent","// Standard field with label and input | select | checkbox\r\n\r\nimport React from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport {FormComponentType} from '../../types/types'\r\nimport FormGroupContent from \"../FormGroupContent/FormGroupContent\"\r\n\r\nconst FieldSimple: React.FC<FormComponentType> = (props) => {\r\n\r\n\treturn (\r\n\t\t<Col xs=\"12\">\r\n\t\t\t<Form.Group controlId={props.input.name} as={Row}>\r\n\r\n\t\t\t\t<FormGroupContent {...props} />\r\n\r\n\t\t\t</Form.Group>\r\n\r\n\t\t</Col>\r\n\t)\r\n\r\n}\r\n\r\nexport default FieldSimple","// Independent hidden input with visible label for field with add button (FieldROChildren.tsx)\r\n\r\nimport React from 'react'\r\nimport Col from 'react-bootstrap/Col'\r\nimport {SelectOptionsType} from '../../types/types'\r\nimport Row from \"react-bootstrap/Row\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport {FieldRenderProps} from \"react-final-form\"\r\nimport {FieldArrayRenderProps} from \"react-final-form-arrays\"\r\n\r\ntype PropsType = {\r\n\toptions: Array<SelectOptionsType>\r\n\tindex: number\r\n}\r\n\r\nconst FieldHidden: React.FC<FieldRenderProps<string> & FieldArrayRenderProps<string, HTMLInputElement> & PropsType> = ({ input, meta, ...props }) => {\r\n\r\n\t// Remove field from form\r\n\tconst handleRemove = () => {\r\n\t\tprops.fields.remove(props.index)\r\n\t}\r\n\r\n\t// Filter an Array of options to get its label\r\n\tconst option: Array<SelectOptionsType> = props.options.filter(item => item.value === input.value)\r\n\r\n\treturn (\r\n\t\t<Col xs=\"12\">\r\n\t\t\t<Row>\r\n\t\t\t\t<Col xs=\"12\" md=\"3\" />\r\n\t\t\t\t<Col className=\"col-form-label col-form-label-lg pl-md-45\">\r\n\t\t\t\t\t<input type=\"hidden\" {...input}/>\r\n\t\t\t\t\t{option[0].label}\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"4\" md=\"3\">\r\n\t\t\t\t\t<Button variant=\"outline-danger\" className=\"border-0\" size=\"lg\" block onClick={handleRemove}>Remove</Button>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t</Row>\r\n\t\t</Col>\r\n\t)\r\n}\r\n\r\nexport default FieldHidden","// Field with adding the selected option to an independent hidden input with visible label\r\n\r\nimport React from 'react'\r\nimport {Field} from \"react-final-form\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport Row from \"react-bootstrap/Row\"\r\nimport Col from \"react-bootstrap/Col\"\r\nimport {FieldArray} from \"react-final-form-arrays\"\r\nimport FieldHidden from \"../FieldHidden/FieldHidden\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport FormGroupContent from \"../FormGroupContent/FormGroupContent\"\r\nimport {FormComponentType} from \"../../types/types\"\r\nimport { useFormState } from 'react-final-form'\r\n\r\n\r\nconst FieldROChildren: React.FC<FormComponentType> = (props) => {\r\n\r\n\t// Destructuring and process props\r\n\tconst {options, ...rest} = props\r\n\tconst [newOptions, setNewOptions] = React.useState(options)\r\n\r\n\t// Import Form values from state\r\n\tconst { values } = useFormState()\r\n\r\n\t// Getting values from FieldArray component and filtering an options to remove already selected ones\r\n\tconst childrenValues = values ? values[props.input.name+'Additional'] as Array<string> : undefined\r\n\tReact.useEffect(() => {\r\n\t\tif (childrenValues && childrenValues.length && options) {\r\n\t\t\t// Removing selected options to create a new list of options\r\n\t\t\tsetNewOptions(options.filter(item => -1 === childrenValues.indexOf(item.value)))\r\n\t\t} else if (options) {\r\n\t\t\tsetNewOptions(options)\r\n\t\t}\r\n\t}, [childrenValues, options])\r\n\r\n\r\n\t// Adding hidden field with label from selected option\r\n\tconst addField = () => {\r\n\t\tprops.push(`${props.input.name}Additional`, props.input.value)\r\n\t\tclearOption()\r\n\t}\r\n\r\n\t// Clearing selected option in the current field\r\n\tconst clearOption = () => {\r\n\t\tprops.form.mutators.clear(props.input.name)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Col xs=\"12\">\r\n\r\n\t\t\t<Form.Group controlId={props.input.name} as={Row}>\r\n\r\n\t\t\t\t<FormGroupContent options={newOptions} {...rest} />\r\n\r\n\t\t\t\t<Col sm=\"4\" md=\"3\">\r\n\t\t\t\t\t<Button variant=\"black\" size=\"lg\" block onClick={addField} disabled={props.meta.error}>Add more</Button>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t{/* Rendering dynamically generated fields */}\r\n\t\t\t\t<FieldArray\r\n\t\t\t\t\tname={`${props.input.name}Additional`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{({fields}) => fields.map((name, index) => (\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\t\tcomponent={FieldHidden}\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\t\tfields={fields}\r\n\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</FieldArray>\r\n\r\n\t\t\t</Form.Group>\r\n\r\n\t\t</Col>\r\n\t)\r\n}\r\n\r\nexport default FieldROChildren","import React from 'react'\r\nimport {FormComponentType} from \"../../types/types\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport Row from \"react-bootstrap/Row\"\r\nimport Col from \"react-bootstrap/Col\"\r\nimport FormControlHelper from \"../FormControlHelper/FormControlHelper\"\r\n\r\n\r\nconst AddOnSelect: React.FC<FormComponentType> = ({ input, meta, ...props }) => {\r\n\treturn (\r\n\t\t<Col xs=\"12\">\r\n\t\t\t<Form.Group controlId={input.name} as={Row}>\r\n\r\n\t\t\t\t<Form.Label className=\"sr-only\">{props.label}</Form.Label>\r\n\r\n\t\t\t\t<FormControlHelper input={input} meta={meta} {...props} />\r\n\r\n\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n\t\t\t\t\t<span>{meta.error}</span>\r\n\t\t\t\t</Form.Control.Feedback>\r\n\r\n\t\t\t</Form.Group>\r\n\r\n\t\t</Col>\r\n\t)\r\n}\r\n\r\nexport default AddOnSelect","import React from 'react'\nimport {Field} from \"react-final-form\"\nimport {FormComponentType, IFormField} from \"../../types/types\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport FormGroupContent from \"../FormGroupContent/FormGroupContent\"\nimport Col from \"react-bootstrap/Col\"\n\ntype PropsType = {\n\tformField: IFormField\n}\n\nconst Field2Inputs: React.FC<FormComponentType & PropsType> = ({ input, meta, ...props }) => {\n\treturn (\n\t\t<Col xs=\"12\">\n\t\t\t<Form.Group controlId={input.name} as={Row}>\n\n\t\t\t\t<FormGroupContent input={input} meta={meta} {...props} />\n\n\t\t\t\t<Col xs=\"8\" md=\"6\">\n\t\t\t\t\t<Field\n\t\t\t\t\t\tcomponent={props.addOn}\n\t\t\t\t\t\tname={props.formField.name}\n\t\t\t\t\t\tlabel={props.formField.label}\n\t\t\t\t\t\ttype={props.formField.type}\n\t\t\t\t\t\toptions={props.formField.options}\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\n\t\t\t</Form.Group>\n\n\t\t</Col>\n\t\t)\n}\n\nexport default Field2Inputs","// Row with two inputs: data and data type\r\n\r\nimport React from 'react'\r\nimport {formFields} from '../../formFields/formFields'\r\nimport {FormComponentType} from \"../../types/types\"\r\nimport Field2Inputs from \"./Field2Inputs\"\r\n\r\nconst Field2InputsContainer: React.FC<FormComponentType> = ({ input, meta, ...props }) => {\r\n\r\n\tconst nextIndex: number = props.index + 1\r\n\r\n\treturn (\r\n\t\t<Field2Inputs input={input} meta={meta} formField={formFields[props.currentStep][nextIndex]} {...props}/>\r\n\t)\r\n}\r\n\r\nexport default Field2InputsContainer","import { IFormField } from '../types/types'\r\nimport * as yup from 'yup'\r\nimport FieldSimple from '../components/FieldSimple/FieldSimple'\r\nimport FieldROChildren from \"../components/FieldROChildren/FieldROChildren\"\r\nimport AddOnSelect from \"../components/AddOnSelect/AddOnSelect\";\r\nimport Field2InputsContainer from \"../components/Field2Inputs/Field2InputsContainer\";\r\n\r\nexport const formFields: Array<Array<IFormField>> = [\r\n\t[\r\n\t\t{\r\n\t\t\tlabel: 'First name',\r\n\t\t\tname: 'userFirstName',\r\n\t\t\ttype: 'text',\r\n\t\t\tcomponent: FieldSimple,\r\n\t\t\tyupObject: (yup.string().trim().required('First name is required')),\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'Last name',\r\n\t\t\tname: 'userLastName',\r\n\t\t\ttype: 'text',\r\n\t\t\tcomponent: FieldSimple,\r\n\t\t\tyupObject: (yup.string().trim().required('Last name is required')),\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'Languages you speak',\r\n\t\t\tname: 'userLanguages',\r\n\t\t\ttype: 'select',\r\n\t\t\tcomponent: FieldROChildren,\r\n\t\t\toptions: [{ value: '', label: 'Please choose...' }, { value: 'EN', label: 'English' }, { value: 'DE', label: 'German' }, { value: 'FR', label: 'French' }],\r\n\t\t\tyupObject: (yup.string().trim().required('Please select language')),\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'Hourly rate',\r\n\t\t\tlabelInfo: {title: 'Popover title', message: 'This is an example of a label description'},\r\n\t\t\tname: 'userSalary',\r\n\t\t\ttype: 'number',\r\n\t\t\tcomponent: Field2InputsContainer,\r\n\t\t\taddOn: AddOnSelect,\r\n\t\t\tyupObject: (yup.number().required('Hourly rate is required').round('round').positive('Hourly rate must be greater than 0').typeError('Hourly rate must be a number')),\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'Currency',\r\n\t\t\tname: 'userCurrency',\r\n\t\t\ttype: 'select',\r\n\t\t\toptions: [{ value: '', label: 'Please choose...' }, { value: 'USD', label: '$ \\u2013 US dollar' }, { value: 'EUR', label: '\\u20AC \\u2013 Euro' }],\r\n\t\t\tcomponent: null,\r\n\t\t\tyupObject: (yup.string().trim().required('Currency is required')),\r\n\t\t},\r\n\t],\r\n\t[\r\n\t\t{\r\n\t\t\tlabel: 'Email',\r\n\t\t\tname: 'userEmail',\r\n\t\t\ttype: 'email',\r\n\t\t\tcomponent: FieldSimple,\r\n\t\t\tyupObject: (yup.string().trim().required('Email is required').email('Enter a valid email')),\r\n\t\t},\r\n\t],\r\n\t[\r\n\t\t{\r\n\t\t\tlabel: 'I agree to the processing of personal data',\r\n\t\t\tname: 'gdpr',\r\n\t\t\ttype: 'checkbox',\r\n\t\t\tcomponent: FieldSimple,\r\n\t\t\tyupObject: (yup.boolean().required('Agreement is required').oneOf([true], 'Agreement is required')),\r\n\t\t}\r\n\t]\r\n]\r\n","// Form header with steps tabs\r\n\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n\tcurrentStep: number\r\n\tformWizardLength: number\r\n\r\n\tpreviousStep: () => void\r\n}\r\n\r\nconst FormHeader: React.FC<PropsType> = (props) => {\r\n\r\n\tlet items = []\r\n\r\n\tfor (let i = 0; i < props.formWizardLength; i++) {\r\n\t\tswitch (true) {\r\n\t\t\tcase (i === props.currentStep):\r\n\t\t\t\titems.push(<span className=\"form-nav-item active\" key={i}>{i+1}</span>)\r\n\t\t\t\tbreak\r\n\t\t\tcase (i + 1 === props.currentStep):\r\n\t\t\t\titems.push(<button type=\"button\" key={i} onClick={props.previousStep} className=\"form-nav-item prev\">{i+1}</button>)\r\n\t\t\t\tbreak\r\n\t\t\tcase (i - 1 === props.currentStep):\r\n\t\t\t\titems.push(<button type=\"submit\" key={i} className=\"form-nav-item next\">{i+1}</button>)\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\titems.push(<span className=\"form-nav-item\" key={i}>{i+1}</span>)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"form-nav mb-45 d-flex justify-content-center\">\r\n\t\t\t{items}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default FormHeader","import React from 'react'\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\r\nimport {useFormState} from \"react-final-form\";\r\n\r\ntype PropsType = {}\r\n\r\nconst FormState: React.FC<PropsType> = () => {\r\n\r\n\t// Import values from state\r\n\tconst { values } = useFormState()\r\n\r\n\treturn (\r\n\t\t<Jumbotron className=\"mt-5\">\r\n\t\t\t<p>Form state:</p>\r\n\t\t\t<pre>{JSON.stringify(values, null, 2)}</pre>\r\n\t\t</Jumbotron>\r\n\t)\r\n}\r\n\r\nexport default FormState","import React from 'react'\r\nimport {Field, Form} from 'react-final-form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {formFields} from '../../formFields/formFields'\r\nimport {customValidator} from '../../common/validator'\r\nimport arrayMutators from 'final-form-arrays'\r\nimport {Mutator} from \"final-form\"\r\nimport FormHeader from \"../FormHeader/FormHeader\"\r\nimport FormState from '../FormState/FormState'\r\n\r\ntype PropsType = {}\r\n\r\nconst FormWizard: React.FC<PropsType> = () => {\r\n\r\n\t// Form wizard step\r\n\tconst [currentStep, setCurrentStep] = React.useState(0)\r\n\r\n\t// Steps total\r\n\tconst formWizardLength = formFields.length\r\n\r\n\t// Next step of the form wizard with steps length check\r\n\tconst nextStep = () => {\r\n\t\tsetCurrentStep(Math.min(currentStep + 1, formWizardLength - 1))\r\n\t}\r\n\r\n\t// Previous step of the form wizard with steps length check\r\n\tconst previousStep = () => {\r\n\t\tsetCurrentStep(Math.max(currentStep - 1, 0))\r\n\t}\r\n\r\n\t// Check, is this the last step?\r\n\tconst isLastStep = currentStep === formWizardLength - 1\r\n\r\n\t// Form submit\r\n\tconst onSubmit = (values: object) => {\r\n\t\twindow.alert(JSON.stringify(values, null, 2))\r\n\t}\r\n\r\n\tconst handleSubmit = (values: object) => {\r\n\r\n\t\tconst isLastStep = (currentStep) === formWizardLength - 1\r\n\t\tif (isLastStep) {\r\n\t\t\treturn onSubmit(values)\r\n\t\t} else {\r\n\t\t\tnextStep()\r\n\t\t}\r\n\t}\r\n\r\n\t// Cleaning function for selected value (see Form mutators)\r\n\tconst clear: Mutator = ([name], state, {changeValue}) => {\r\n\t\tchangeValue(state, name, () => undefined)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<Form\r\n\t\t\t\tonSubmit={handleSubmit}\r\n\t\t\t\tvalidate={values => customValidator(values, formFields[currentStep])}\r\n\t\t\t\tmutators={{\r\n\t\t\t\t\t...arrayMutators,\r\n\t\t\t\t\tclear\r\n\t\t\t\t}}\r\n\t\t\t\tsubscription={{ submitting: true }}\r\n\t\t\t>\r\n\r\n\t\t\t\t{({handleSubmit, submitting, form: {mutators: {push}}, form}) => (\r\n\t\t\t\t\t<form onSubmit={handleSubmit} className=\"pb-45\">\r\n\r\n\t\t\t\t\t\t<FormHeader\r\n\t\t\t\t\t\t\tcurrentStep={currentStep}\r\n\t\t\t\t\t\t\tformWizardLength={formWizardLength}\r\n\t\t\t\t\t\t\tpreviousStep={previousStep}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t{formFields[currentStep].map((formField, index) =>\r\n\t\t\t\t\t\t\t\tformField.component ?\r\n\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\tcomponent={formField.component}\r\n\t\t\t\t\t\t\t\t\t\tkey={formField.name}\r\n\t\t\t\t\t\t\t\t\t\tname={formField.name}\r\n\t\t\t\t\t\t\t\t\t\tlabel={formField.label}\r\n\t\t\t\t\t\t\t\t\t\tlabelInfo={formField.labelInfo}\r\n\t\t\t\t\t\t\t\t\t\ttype={formField.type}\r\n\t\t\t\t\t\t\t\t\t\toptions={formField.options}\r\n\t\t\t\t\t\t\t\t\t\taddOn={formField.addOn}\r\n\t\t\t\t\t\t\t\t\t\tpush={push}\r\n\t\t\t\t\t\t\t\t\t\tform={form}\r\n\t\t\t\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\t\t\t\tcurrentStep={currentStep}\r\n\t\t\t\t\t\t\t\t\t/> : null\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"d-flex\">\r\n\t\t\t\t\t\t\t{currentStep > 0 && (\r\n\t\t\t\t\t\t\t\t<Button type=\"button\" variant=\"dark\" size=\"lg\" onClick={previousStep}>\r\n\t\t\t\t\t\t\t\t\t« Previous\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t{!isLastStep &&\r\n\t\t\t\t\t\t\t<Button type=\"submit\" variant=\"dark\" className=\"ml-auto\" size=\"lg\">Next »</Button>}\r\n\t\t\t\t\t\t\t{isLastStep && (\r\n\t\t\t\t\t\t\t\t<Button type=\"submit\" disabled={submitting} className=\"ml-auto\" size=\"lg\">\r\n\t\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<FormState />\r\n\r\n\t\t\t\t\t</form>\r\n\t\t\t\t)}\r\n\r\n\t\t\t</Form>\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default FormWizard","import * as yup from \"yup\"\r\nimport { setIn } from 'final-form'\r\nimport {IFormField} from \"../types/types\"\r\nimport {ObjectSchema, ValidationError} from \"yup\";\r\n\r\nexport const customValidator = (values: object, formFields: Array<IFormField>) => {\r\n\r\n    const validationSchema = yup.object().shape(Object.fromEntries(\r\n        formFields.map(formField => [formField.name, formField.yupObject])\r\n    ))\r\n\r\n\tconst validateFormValues = (schema: ObjectSchema) => async (values: object) => {\r\n\t\ttry {\r\n\t\t\tawait schema.validate(values, { abortEarly: false })\r\n\t\t} catch (error) {\r\n\r\n\t\t\treturn error.inner.reduce((formError: object, innerError: ValidationError) => {\r\n\t\t\t\treturn setIn(formError, innerError.path, innerError.message)\r\n\t\t\t}, {})\r\n\t\t}\r\n\t}\r\n\r\n    return validateFormValues(validationSchema)(values)\r\n}","import React from 'react'\nimport Header from '../Header/Header'\nimport FormWizard from '../FormWizard/FormWizard'\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n\nconst App = () => {\n\n\treturn (\n\t\t<>\n\t\t\t<Header/>\n\t\t\t<main className=\"container\">\n\t\t\t\t<Row className=\"justify-content-center\">\n\t\t\t\t\t<Col sm=\"11\" md=\"10\" lg=\"9\" xl=\"8\">\n\t\t\t\t\t\t<FormWizard/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</main>\n\t\t</>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './scss/index.scss'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}